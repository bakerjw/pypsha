# -*- coding: utf-8 -*-
"""
Jan 2023

@author: neetesh
"""

import numpy as np
from itertools import combinations_with_replacement
from scipy.interpolate import LinearNDInterpolator
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal, norm, lognorm, poisson

def haversine_distance(lon1,lat1,lon2,lat2,radius = 6371):
    
    lon1, lat1, lon2, lat2 = map(np.radians, [lon1, lat1, lon2, lat2])

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    dangle = 2 * np.arcsin(np.sqrt( np.sin(dlat/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2.0)**2 ))
    
    return radius*dangle

def baker_jayaram2008 (t1,t2):
    tmin = np.minimum(t1,t2)
    tmax = np.maximum(t1,t2)
    
    c1 = (1-np.cos(np.pi/2 - np.log(tmax/np.maximum(tmin, 0.109)) * 0.366 ))
    c2 = 1 - 0.105*(1 - 1.0/(1+np.exp(100*tmax-5)))*(tmax-tmin)/(tmax-0.0099)
    
    c3 = c1
    c3[tmax<0.109] = c2[tmax<0.109]
    
    c4 = c1 + 0.5 * (c3**0.5 - c3) * (1 + np.cos(np.pi*(tmin)/(0.109)))
    
    rhos = c4
    ind1 = tmax<0.2
    rhos[ind1] = np.minimum(c2,c4)[ind1]
    ind1 = tmin>0.109
    rhos[ind1] = c1[ind1]
    ind1 = tmax<=0.109
    rhos[ind1] = c2[ind1]

    return rhos


def hazard_curve_from_weights(imdf,weights):
    im = imdf.values
    weights_sorted = weights[im[::-1].argsort(axis=0)]
    im[::-1].sort(axis=0)
    return (im,np.cumsum(weights_sorted,axis=0))


def probability_of_exceedance(im,event_set,intensity_id,sitei):
    rates = event_set.events.metadata.loc[:,['annualized_rate']].values.flatten()
    data_df = event_set.events.data.loc[intensity_id,[sitei]]
    sigmas = data_df.loc['sigma',:].values.flatten()
    mus = data_df.loc['mu',:].values.flatten()
    probs = 1 - lognorm.cdf(im, s=sigmas, scale= np.exp(mus))
#    return (1 - poisson.pmf(k=0,mu=(probs*rates).sum()))
    return 1 - poisson.pmf(k=0,mu=(probs*rates).sum())
   
    
    
    
# B_DATA_YEAR=2019
# t = np.array([0.01, 0.1, 0.2, 0.5, 1, 2, 5, 7.5, 10.0001])
# # tt1,tt2 = np.meshgrid(t,t) 
# # B =  np.array([[[0.29, 0.25, 0.23, 0.23, 0.18, 0.1, 0.06, 0.06, 0.06],
# #                 [0.25, 0.3, 0.2, 0.16, 0.1, 0.04, 0.03, 0.04, 0.05],
# #                 [0.23, 0.2, 0.27, 0.18, 0.1, 0.03, 0, 0.01, 0.02],
# #                 [0.23, 0.16, 0.18, 0.31, 0.22, 0.14, 0.08, 0.07, 0.07],
# #                 [0.18, 0.1, 0.1, 0.22, 0.33, 0.24, 0.16, 0.13, 0.12],
# #                 [0.1, 0.04, 0.03, 0.14, 0.24, 0.33, 0.26, 0.21, 0.19],
# #                 [0.06, 0.03, 0, 0.08, 0.16, 0.26, 0.37, 0.3, 0.26],
# #                 [0.06, 0.04, 0.01, 0.07, 0.13, 0.21, 0.3, 0.28, 0.24],
# #                 [0.06, 0.05, 0.02, 0.07, 0.12, 0.19, 0.26, 0.24, 0.23]],
                
# #                 [[0.47, 0.4, 0.43, 0.35, 0.27, 0.15, 0.13, 0.09, 0.12],
# #                 [0.4, 0.42, 0.37, 0.25, 0.15, 0.03, 0.04, 0, 0.03],
# #                 [0.43, 0.37, 0.45, 0.36, 0.26, 0.15, 0.09, 0.05, 0.08],
# #                 [0.35, 0.25, 0.36, 0.42, 0.37, 0.29, 0.2, 0.16, 0.16],
# #                 [0.27, 0.15, 0.26, 0.37, 0.48, 0.41, 0.26, 0.21, 0.21],
# #                 [0.15, 0.03, 0.15, 0.29, 0.41, 0.55, 0.37, 0.33, 0.32],
# #                 [0.13, 0.04, 0.09, 0.2, 0.26, 0.37, 0.51, 0.49, 0.49],
# #                 [0.09, 0, 0.05, 0.16, 0.21, 0.33, 0.49, 0.62, 0.6],
# #                 [0.12, 0.03, 0.08, 0.16, 0.21, 0.32, 0.49, 0.6, 0.68]],
                
# #                 [[0.24, 0.22, 0.21, 0.09, -0.02, 0.01, 0.03, 0.02, 0.01],
# #                 [0.22, 0.28, 0.2, 0.04, -0.05, 0, 0.01, 0.01, -0.01],
# #                 [0.21, 0.2, 0.28, 0.05, -0.06, 0, 0.04, 0.03, 0.01],
# #                 [0.09, 0.04, 0.05, 0.27, 0.14, 0.05, 0.05, 0.05, 0.04],
# #                 [-0.02, -0.05, -0.06, 0.14, 0.19, 0.07, 0.05, 0.05, 0.05],
# #                 [0.01, 0, 0, 0.05, 0.07, 0.12, 0.08, 0.07, 0.06],
# #                 [0.03, 0.01, 0.04, 0.05, 0.05, 0.08, 0.12, 0.1, 0.08],
# #                 [0.02, 0.01, 0.03, 0.05, 0.05, 0.07, 0.1, 0.1, 0.09],
# #                 [0.01, -0.01, 0.01, 0.04, 0.05, 0.06, 0.08, 0.09, 0.09]]])

# # B_OLD  = np.array([[[0.3, 0.24, 0.23, 0.22, 0.16, 0.07, 0.03, 0, 0],
# #                     [0.24, 0.27, 0.19, 0.13, 0.08, 0, 0, 0, 0],
# #                     [0.23, 0.19, 0.26, 0.19, 0.12, 0.04, 0, 0, 0],
# #                     [0.22, 0.13, 0.19, 0.32, 0.23, 0.14, 0.09, 0.06, 0.04],
# #                     [0.16, 0.08, 0.12, 0.23, 0.32, 0.22, 0.13, 0.09, 0.07],
# #                     [0.07, 0, 0.04, 0.14, 0.22, 0.33, 0.23, 0.19, 0.16],
# #                     [0.03, 0, 0, 0.09, 0.13, 0.23, 0.34, 0.29, 0.24],
# #                     [0, 0, 0, 0.06, 0.09, 0.19, 0.29, 0.3, 0.25],
# #                     [0, 0, 0, 0.04, 0.07, 0.16, 0.24, 0.25, 0.24]],
                    
# #                     [[0.31, 0.26, 0.27, 0.24, 0.17, 0.11, 0.08, 0.06, 0.05],
# #                     [0.26, 0.29, 0.22, 0.15, 0.07, 0, 0, 0, -0.03],
# #                     [0.27, 0.22, 0.29, 0.24, 0.15, 0.09, 0.03, 0.02, 0],
# #                     [0.24, 0.15, 0.24, 0.33, 0.27, 0.23, 0.17, 0.14, 0.14],
# #                     [0.17, 0.07, 0.15, 0.27, 0.38, 0.34, 0.23, 0.19, 0.21],
# #                     [0.11, 0, 0.09, 0.23, 0.34, 0.44, 0.33, 0.29, 0.32],
# #                     [0.08, 0, 0.03, 0.17, 0.23, 0.33, 0.45, 0.42, 0.42],
# #                     [0.06, 0, 0.02, 0.14, 0.19, 0.29, 0.42, 0.47, 0.47],
# #                     [0.05, -0.03, 0, 0.14, 0.21, 0.32, 0.42, 0.47, 0.54]],
                    
# #                     [[0.38, 0.36, 0.35, 0.17, 0.04, 0.04, 0, 0.03, 0.08],
# #                     [0.36, 0.43, 0.35, 0.13, 0, 0.02, 0, 0.02, 0.08],
# #                     [0.35, 0.35, 0.45, 0.11, -0.04, -0.02, -0.04, -0.02, 0.03],
# #                     [0.17, 0.13, 0.11, 0.35, 0.2, 0.06, 0.02, 0.04, 0.02],
# #                     [0.04, 0, -0.04, 0.2, 0.3, 0.14, 0.09, 0.12, 0.04],
# #                     [0.04, 0.02, -0.02, 0.06, 0.14, 0.22, 0.12, 0.13, 0.09],
# #                     [0, 0, -0.04, 0.02, 0.09, 0.12, 0.21, 0.17, 0.13],
# #                     [0.03, 0.02, -0.02, 0.04, 0.12, 0.13, 0.17, 0.23, 0.1],
# #                     [0.08, 0.08, 0.03, 0.02, 0.04, 0.09, 0.13, 0.1, 0.22]]])

# # Upper triangular flattened values
# B_unique =   np.array([[0.29, 0.25, 0.23, 0.23, 0.18, 0.1 , 0.06, 0.06, 0.06,
#                         0.3 , 0.2 , 0.16, 0.1 , 0.04, 0.03, 0.04, 0.05, 0.27,
#                         0.18, 0.1 , 0.03, 0.  , 0.01, 0.02, 0.31, 0.22, 0.14,
#                         0.08, 0.07, 0.07, 0.33, 0.24, 0.16, 0.13, 0.12, 0.33,
#                         0.26, 0.21, 0.19, 0.37, 0.3 , 0.26, 0.28, 0.24, 0.23],
#                        [0.47, 0.4 , 0.43, 0.35, 0.27, 0.15, 0.13, 0.09, 0.12,
#                         0.42, 0.37, 0.25, 0.15, 0.03, 0.04, 0.  , 0.03, 0.45,
#                         0.36, 0.26, 0.15, 0.09, 0.05, 0.08, 0.42, 0.37, 0.29,
#                         0.2 , 0.16, 0.16, 0.48, 0.41, 0.26, 0.21, 0.21, 0.55,
#                         0.37, 0.33, 0.32, 0.51, 0.49, 0.49, 0.62, 0.6 , 0.68],
#                        [0.24,  0.22,  0.21,  0.09, -0.02,  0.01,  0.03,  0.02,  0.01,
#                         0.28,  0.2 ,  0.04, -0.05,  0.  ,  0.01,  0.01, -0.01,  0.28,
#                         0.05, -0.06,  0.  ,  0.04,  0.03,  0.01,  0.27,  0.14,  0.05,
#                         0.05,  0.05,  0.04,  0.19,  0.07,  0.05,  0.05,  0.05,  0.12,
#                         0.08,  0.07,  0.06,  0.12,  0.1 ,  0.08,  0.1 ,  0.09,  0.09]])

# B_unique_old =   np.array([[0.3 , 0.24, 0.23, 0.22, 0.16, 0.07, 0.03, 0.  , 0.,
#                             0.27, 0.19,  0.13, 0.08, 0.  , 0.  , 0.  , 0.  , 0.26,
#                             0.19, 0.12, 0.04, 0.  , 0.  , 0.  , 0.32, 0.23, 0.14,
#                             0.09, 0.06, 0.04, 0.32, 0.22, 0.13, 0.09, 0.07, 0.33,
#                             0.23, 0.19, 0.16, 0.34, 0.29, 0.24, 0.3 , 0.25, 0.24],
#                            [0.31,  0.26,  0.27,  0.24,  0.17,  0.11,  0.08,  0.06,  0.05,
#                             0.29,  0.22,  0.15,  0.07,  0.  ,  0.  ,  0.  , -0.03,  0.29,
#                             0.24,  0.15,  0.09,  0.03,  0.02,  0.  ,  0.33,  0.27,  0.23,
#                             0.17,  0.14,  0.14,  0.38,  0.34,  0.23,  0.19,  0.21,  0.44,
#                             0.33,  0.29,  0.32,  0.45,  0.42,  0.42,  0.47,  0.47,  0.54],
#                            [0.38,  0.36,  0.35,  0.17,  0.04,  0.04,  0.  ,  0.03,  0.08,
#                             0.43,  0.35,  0.13,  0.  ,  0.02,  0.  ,  0.02,  0.08,  0.45,
#                             0.11, -0.04, -0.02, -0.04, -0.02,  0.03,  0.35,  0.2 ,  0.06,
#                             0.02,  0.04,  0.02,  0.3 ,  0.14,  0.09,  0.12,  0.04,  0.22,
#                             0.12,  0.13,  0.09,  0.21,  0.17,  0.13,  0.23,  0.1 ,  0.22]])

# tt_unique  = list(combinations_with_replacement(t,2))
# if B_DATA_YEAR==2019:
#     interp = LinearNDInterpolator(tt_unique, B_unique.T)
# elif B_DATA_YEAR==2013:
#     interp = LinearNDInterpolator(tt_unique, B_unique_old.T)

# x = np.linspace(min(t), max(t),1000)
# t1, t2 = np.meshgrid(x, x)
# tmin = np.minimum(t1,t2)
# tmax = np.maximum(t1,t2)

# b_coef = interp(tmin, tmax).T
# plt.pcolormesh(t1, t2, b_coef[0], shading='auto')
# plt.plot(np.array(list(zip(*tt_unique)))[0], np.array(list(zip(*tt_unique)))[1], ".k", label="input point")
# plt.colorbar()

    

    